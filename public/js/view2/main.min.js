var matchhead = ["date","tourn","surf","level","wl","player",
              "rank","seed","entry","round",
              "score","max","opp","orank","oseed","oentry","ohand","obh",
              "obday", "oht","ocountry","oactive",
              "tbw", "tbl","setw","setl",
              "time","aces","dfs","pts","firsts","fwon",
              "swon",'games',"saved","chances","oaces","odfs","opts","ofirsts",
              "ofwon","oswon",'ogames',"osaved","ochances"]
    
var hdrsServe = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'DR', 'A%', 'DF%', '1stIn', '1st%', '2nd%', 'BPSaved', 'Time'];
var hdrsReturn = ['Date', 'Tournament', 'Surface', 'Rd', 'Rk', 'vRk', '', 'Score', 'DR', 'TPW', 'RPW', 'vA%', 'v1st%', 'v2nd%', 'BPConv', 'Time'];
var hdrSrv = ['Rk', 'Player', 'M', 'M W-L', 'M W%', 'SPW', 'SPW-InP', 'Aces', 'Ace%', 'DFs', 'DF%', 
              'DF/2s', '1stIn', '1st%', '2nd%', '2%-InP', 'Hld%', 'Pts/SG', 'PtsL/SG'];
var hdrRet = ['Rk', 'Player', 'M', 'RPW', 'RPW-InP', 'vAce%', 'vDF%', 'v1st%', 'v2nd%', 
              'Brk%', 'Pts/RG', 'PtsW/RG', 'MdOppRk', 'MnOppRk'];
var hdrBrk = ['Rk', 'Player', 'M', 'BPConv%', 'BPConv', 'BPChnc', 'BP/G', 'BP/S', 'BP/M', 'Bks/S', 'Bks/M',  
              'BPSvd%', 'BPSaved', 'BPvs', 'BPvs/G', 'BPvs/S', 'BPvs/M', 'Bkn/S', 'Bkn/M'];
var hdrOth = ['Rk', 'Player', 'M', 'DR', 'Points', 'TPW%', 'TBs', 'TB W-L', 'TB W%', 'TB/S', 'Sets', 'Set W-L', 'S W%', 
              'Gms', 'Game W-L', 'G W%', 'Time/Mt', 'Min/Set', 'Sec/Pt']; 

var fourspaces = "\u00a0\u00a0\u00a0\u00a0";

var currentTime = new Date();
var month = currentTime.getMonth() + 1;
var day = currentTime.getDate();
var year = currentTime.getFullYear().toString();
var mm, dd;
if (month < 10) {mm = '0' + month.toString();}
else {mm = month.toString();}
if (day < 10) {dd = '0' + day.toString();}
else {dd = day.toString();}
var today = year + mm + dd;

function alignRound(num, dec, perc) {
    if (perc == 1) { num = num*100; }
    var intrate = Math.round((num)*Math.pow(10, dec))/Math.pow(10, dec);
    var extra = intrate + Math.pow(10, -1*(dec+1));
    var strex = String(extra);
    var indexdot = strex.indexOf('.');
    var done;
    var c = ""
    if (perc == 1) {done = strex.slice(0, (indexdot+dec+1)) + c;}
    else {done = strex.slice(0, (indexdot+dec+1));}
    if (done[0] == 'N' || done[0] == c) {return '-';}
    else if (done[0] == 'I') {return '-';} // infinity
    else if (dec == 0) {return done.slice(0, -2) + done.slice(-1);}
    else {return done;}
};

function filterDict(fid, match, mults) {
    if (fid == 'hand') {
        if (hdict2[match.ohand] in mults) {return 1;}
        else if ('One-hand BH' in mults && match.obh == '1') {return 1;}
        else if ('Two-hand BH' in mults && match.obh == '2') {return 1;}
        else {return 0;}
        }
    else if (fid == 'age') {
        if ('Younger' in mults && (parseInt(match.obday)) > dob) {return 1;}
        else if ('Older' in mults && (parseInt(match.obday) < dob)) {return 1;}
        else if ('Under 21' in mults && (parseInt(match.date) - parseInt(match.obday)) < 210000) {return 1;}
        else if ('Under 23' in mults && (parseInt(match.date) - parseInt(match.obday)) < 230000) {return 1;}
        else if ('28 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 280000) {return 1;}
        else if ('30 & Over' in mults && (parseInt(match.date) - parseInt(match.obday)) > 300000) {return 1;}
        else {return 0;}
        }
    else if (fid == 'rank') {
        if (match.orank == 'UNR') {match.orank = 2000;}
        if ('Top 5' in mults && parseInt(match.orank) < 6) {return 1;}
        else if ('Top 10' in mults && parseInt(match.orank) < 11) {return 1;}
        else if ('Top 20' in mults && parseInt(match.orank) < 21) {return 1;}
        else if ('Top 50' in mults && parseInt(match.orank) < 51) {return 1;}
        else if ('Top 100' in mults && parseInt(match.orank) < 101) {return 1;}
        else if ('11+' in mults && parseInt(match.orank) > 10) {return 1;}
        else if ('21+' in mults && parseInt(match.orank) > 20) {return 1;}
        else if ('51+' in mults && parseInt(match.orank) > 50) {return 1;}
        else if ('101+' in mults && parseInt(match.orank) > 100) {return 1;}
        else if ('Higher' in mults && (parseInt(match.orank) < parseInt(match.rank))) {return 1;}
        else if ('Lower' in mults && (parseInt(match.orank) > parseInt(match.rank))) {return 1;}
        else {return 0;}
        }
    else if (fid == 'asrank') {
        if (match.rank == 'UNR') {match.rank = 2000;}
        if ('Number 1' in mults&& parseInt(match.rank) <= 1) {return 1;}
        if ('Top 5' in mults && parseInt(match.rank) <= 5) {return 1;}
        if ('Top 10' in mults && parseInt(match.rank) <= 10) {return 1;}
        else if ('Top 20' in mults && parseInt(match.rank) <= 20) {return 1;}
        else if ('Top 50' in mults && parseInt(match.rank) <= 50) {return 1;}
        else if ('Top 100' in mults && parseInt(match.rank) <= 100) {return 1;}
        else if ('Top 200' in mults && parseInt(match.rank) <= 200) {return 1;}
        else if ('2+' in mults && parseInt(match.rank) >= 2) {return 1;}
        else if ('6+' in mults && parseInt(match.rank) >= 6) {return 1;}
        else if ('11+' in mults && parseInt(match.rank) >= 11) {return 1;}
        else if ('21+' in mults && parseInt(match.rank) >= 21) {return 1;}
        else if ('51+' in mults && parseInt(match.rank) >= 51) {return 1;}
        else if ('101+' in mults && parseInt(match.rank) >= 101) {return 1;}
        else if ('201+' in mults && parseInt(match.rank) >= 201) {return 1;}
        else {return 0;}
        }
    else if (fid == 'level') {
        if ('All ATP' in mults) {
            if (match.level == 'Q' || match.level == 'C') {}
            else if (match.level == 'J') {}
            else {return 1;} 
            }
        if (levdict2[match.level] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'round') {
        if (rddict2[match.round] in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'span') {
        if ('Career' in mults) {return 1;}
        else if ('Last 52' in mults) {
            var keyday = today;
            if (parseInt(match.date) < (keyday-10000)) {}
            //else if (parseInt(match.date) > keyday) {}
            else {return 1;}
            }
        var yr = match.date.slice(0,4);
        var mmdd = match.date.slice(4);
        var syr;
        if (parseInt(mmdd) > 1226) {
            syr = (parseInt(yr) + 1) + '';
            }
        else {syr = yr;}
        if (syr in mults) {return 1;}
        else {return 0;}
        }
    else if (fid == 'entry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.entry == 'Q' || match.entry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.entry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.seed.length > 0) {return 1;}
        else if ('Unseeded' in mults && match.seed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'oentry') {  // -1 because entry can be '' for seeds
        if ('Qualifier' in mults && (match.oentry == 'Q' || match.oentry == 'LL')) {return 1;}
        else if ('Wild Card' in mults && match.oentry == 'WC') {return 1;}
        else if ('Seeded' in mults && match.oseed.length > 0) {return 1;}
        else if ('Unseeded' in mults && match.oseed.length == 0) {return 1;}
        else {return 0;}
        }
    else if (fid == 'height') {  
        if ('Shorter' in mults && parseInt(match.oht) < ht) {return 1;}
        else if ('Taller' in mults && parseInt(match.oht) > ht) {return 1;}
        else if ("Under 5'10" in mults && parseInt(match.oht) < 178) {return 1;}
        else if ("Under 6'0" in mults && parseInt(match.oht) < 183) {return 1;}
        else if ("Over 6'2" in mults && parseInt(match.oht) > 188) {return 1;}
        else if ("Over 6'4" in mults && parseInt(match.oht) > 193) {return 1;}
        else {return 0;}
        }
    else if (fid == 'sets') {
        if (match.score == '') {return 0;}
        if (match.score == 'W/O') {return 0;}
        if ('All Best of 3' in mults && (parseInt(match.max) == 3)) {return 1;}
        else if ('All Best of 5' in mults && (parseInt(match.max) == 5)) {return 1;}
        if ('Straights' in mults || 'Deciders' in mults) {
            //if (match.score == 'W/O') {return 0;} // only because later filters could not possibly include this
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if ('Straights' in mults && (match.max/nsets >= 1.4)) {return 1;}
            else if ('Deciders' in mults && (parseInt(match.max) == nsets)) {return 1;}
            }
        if ('5-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 5) {return 1;}
            }
        if ('4-Setters' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 4) {return 1;}
            }
        if ('3 Sets (of 5)' in mults && (parseInt(match.max) == 5)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('3 Sets (of 3)' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 3) {return 1;}
            }
        if ('2-Setters' in mults && (parseInt(match.max) == 3)) {
            var sets = match.score.split(' ');
            var nsets = sets.length;
            if (sets[(sets.length-1)] == 'RET') {nsets = nsets - 1;}
            if (nsets == 2) {return 1;}
            }
        }
    else if (fid == 'results') {
        if (match.score == '') {return 0;}
        if (match.score == 'W/O') {
            if ('W by W/O' in mults && match.wl == 'W') {return 1;}
            else if ('L by W/O' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            } // only because later filters could not possibly include this
        else if (match.score.slice(-3) == 'RET') {
            if ('W by RET' in mults && match.wl == 'W') {return 1;}
            else if ('L by RET' in mults && match.wl == 'L') {return 1;}
            else {return 0;}
            }        
        if ('Wins' in mults && match.wl == 'W') {return 1;}
        else if ('Losses' in mults && match.wl == 'L') {return 1;}
        var sets = match.score.split(' ');
        if (sets[1] == 'RET') {return 0;} // only because this is the last filter
        var firstset = sets[0];
        var a = parseInt(firstset[0]), b = parseInt(firstset[2]);
        var wonfirst;
        if (match.wl == 'W') {
            if (a>b) {wonfirst=1;}
            else {wonfirst=0;}
            }
        else {
            if (a>b) {wonfirst=0;}
            else {wonfirst=1;}
            }
        if ('Won 1st Set' in mults && wonfirst == 1) {return 1;}
        else if ('Lost 1st Set' in mults && wonfirst == 0) {return 1;}
        if (sets.length < 3) {return 0;} // limit to five-setters
        else if (sets[2] == 'RET') {return 0;} // only because this is the last filter
        var secondset = sets[1];
        var a = parseInt(secondset[0]), b = parseInt(secondset[2]);
        var wonsecond;
        if (match.wl == 'W') {
            if (a>b) {wonsecond=1;}
            else {wonsecond=0;}
            }
        else {
            if (a>b) {wonsecond=0;}
            else {wonsecond=1;}
            }
        if ('Won Sets 1&2' in mults && (wonfirst == 1 && wonsecond == 1)) {return 1;}
        else if ('Lost Sets 1&2' in mults && (wonsecond == 0 && wonfirst == 0)) {return 1;}
        else if ('Split 1&2' in mults && (wonfirst != wonsecond)) {return 1;}
        if (sets.length < 4) {return 0;} // limit to four-plus setters
        else if (sets[3] == 'RET') {return 0;} // only because this is the last filter
        var thirdset = sets[2];
        var a = parseInt(thirdset[0]), b = parseInt(thirdset[2]);
        var wonthird;
        if (match.wl == 'W') {
            if (a>b) {wonthird=1;}
            else {wonthird=0;}
            }
        else {
            if (a>b) {wonthird=0;}
            else {wonthird=1;}
            }
        var setswon = wonfirst+wonsecond+wonthird
        if ('Up 2-1 Sets' in mults && setswon == 2) {return 1;}
        else if ('Down 1-2 Sets' in mults && setswon == 1) {return 1;}        
        return 0;
        }
    else if (fid == 'tourney') {
        if ('Tour Finals' in mults) {
            if (match.tourn == 'Tour Finals' || match.tourn == 'Masters Cup') {return 1;}
            }
        else if ('Olympics' in mults) {
            if (match.tourn.indexOf('Olympics') != -1) {return 1;}
            }
        else if ('Davis Cup' in mults) {
            if (match.tourn.indexOf('Davis Cup') != -1) {return 1;}
            }
        else if (match.tourn.slice(-2) == ' Q') {
            if (match.tourn.slice(0,-2) in mults) {return 1;}
            }
        if (match.tourn in mults) {return 1;}
        return 0;
        }
    else if (fid == 'country') {
        if (match.ocountry in mults) {return 1;}
        return 0;
        }
    else if (fid == 'surface') {
        if (match.surf in mults) {return 1;}
        return 0;
        }
    else if (fid == 'h2h') {
        if (match.opp in mults) {return 1;}
        return 0;
        }
    else if (fid == 'not') {
        if (match.opp in mults) {return 0;}
        return 1;
        }
    }

function genfilter(fid, first, match, att) {
    // fid = filter id; first = default select; match = relevant match object; att = rel attribute
    // find e.g. 'surfaceselected' text -- that's it
    var selname = '.' + fid + 'selected';
    var multselect = $(selname).text().split(fourspaces + fourspaces).slice(1); // list of selected for this filte
    if (multselect[0] == undefined) { // ugly IE hack
        var multselect = $(selname).text().split("        ").slice(1);
    }
    var mults = {};
    for (var i=0; i<multselect.length; i++) {mults[multselect[i].replace(/\u00a0/g, ' ')] = 1;}  // make list into object, for 'in' searching
    if ('All' in mults) {return 1;}
    else if (filterDict(fid, match, mults) != 1) {return 0;} // this is where it gets messy
    return 1;
}

function makeMatch() {
    var showstats = 'o'

    var pstats = {};
    for (var s = 0; s < matchmx.length; s++) {             
        var match = {}
        for (var x=0; x<matchmx[s].length; x++) {
            match[matchhead[x]] = matchmx[s][x];
        }
        if (genfilter('h2h', 'Head-to-Head', match, match.opp) != 1) {continue;}
        if (genfilter('not', 'Exclude Opp', match, match.opp) != 1) {continue;} 
        if (genfilter('span', 'Last 52', match, match.date) != 1) {continue;}  
        if (genfilter('hand', 'vs Hand', match, match.ohand) != 1) {continue;}
        if (genfilter('country', 'vs Country', match, match.ocountry) != 1) {continue;}
        if (genfilter('age', 'vs Age', match, match.obday) != 1) {continue;}
        if (genfilter('rank', 'vs Rank', match, match.orank) != 1) {continue;}
        if (genfilter('asrank', 'as Rank', match, match.rank) != 1) {continue;}
        if (genfilter('level', 'Level', match, match.level) != 1) {continue;}
        if (genfilter('round', 'Round', match, match.round) != 1) {continue;}
        if (genfilter('surface', 'Surface', match, match.surf) != 1) {continue;} 
        if (genfilter('tourney', 'Event', match, match.tourn) != 1) {continue;} 
        if (genfilter('entry', 'Entry', match, match.entry) != 1) {continue;} 
        if (genfilter('oentry', 'vs Entry', match, match.oentry) != 1) {continue;} 
        if (genfilter('height', 'vs Height', match, match.oht) != 1) {continue;}
        if (genfilter('results', 'All', match, match.wl) != 1) {continue;}
        if (genfilter('sets', 'All', match, match.max) != 1) {continue;}  
   
    if (match.player in pstats) {}
    else {
        pstats[match.player] = {'W': 0, 'L': 0, 'oranks': []};
        for (var y=22; y<matchhead.length; y++) {
            pstats[match.player][matchhead[y]] = 0;
        }
    }
    if (match.score == 'W/O' || match.score == 'RET') {}
    else if (match.wl == 'W') {pstats[match.player]['W'] += 1;}
    else if (match.wl == 'L') {pstats[match.player]['L'] += 1;}
    else {} // how to deal with W/Os for win, loss totals?
    if (isNaN(parseInt(match.orank))) {}
    else {pstats[match.player]['oranks'].push(match.orank);}
        for (var z=22; z<matchhead.length; z++) {
            var statname = matchhead[z];
            if (isNaN(parseInt(match[statname]))) {}
            else {pstats[match.player][statname] += parseInt(match[statname]);}
        }
    }
    // put 'avg' in dict, sum all counting stats; deal separately with oranks?
    pstats['avg'] = {'oranks': []};
    var statlist = matchhead.slice(22).concat(['W', 'L']);
    for (var j=0; j<statlist.length; j++) {
        for (p in pstats) {
            if (p == 'avg') {continue;}
            if (!(statlist[j] in pstats['avg'])) {pstats['avg'][statlist[j]] = 0;}
            pstats['avg'][statlist[j]] += pstats[p][statlist[j]];
        }
    }

    for (p in pstats) {
        if (p == 'avg') {continue;}
        pstats['avg']['oranks'] = pstats['avg']['oranks'].concat(pstats[p]['oranks']);
    }

    for (p in pstats) {
        var nmatches = pstats[p].W + pstats[p].L;
        // keep these handy: total matches, points, sets, games, serve games, return games
        var npoints = parseInt(pstats[p].pts) + parseInt(pstats[p].opts);
        var nsets = parseInt(pstats[p].setw) + parseInt(pstats[p].setl);
        var sgames = parseInt(pstats[p].games);
        var rgames = parseInt(pstats[p].ogames);
        var ngames = sgames+rgames
        var bplost = pstats[p].chances - pstats[p].saved;
        var holds = sgames - bplost;
        var bpconv = pstats[p].ochances - pstats[p].osaved;
    
        // pstats[p] total, record, wp
        if (showstats == 'o') {
            var matchrecord = pstats[p].W + '-' + pstats[p].L;
            var matchwp = alignRound(pstats[p].W/nmatches, 1, 1);
            // standard serve stats
            var acerate = alignRound((pstats[p].aces/pstats[p].pts), 1, 1);
            var dfrate = alignRound((pstats[p].dfs/pstats[p].pts), 1, 1);
            var secondserves = (pstats[p].pts-pstats[p].firsts)
            var defSeconds = alignRound((pstats[p].dfs/secondserves), 1, 1);
            var firstin = alignRound((pstats[p].firsts/pstats[p].pts), 1, 1);
            var fwin = alignRound((pstats[p].fwon/pstats[p].firsts), 1, 1);
            var swin = alignRound((pstats[p].swon/secondserves), 1, 1);
            var swinIn = alignRound((pstats[p].swon/(secondserves-pstats[p].dfs)), 1, 1);
            var servepointswonraw = parseInt(pstats[p].fwon) + parseInt(pstats[p].swon)
            var spw = alignRound((servepointswonraw/pstats[p].pts), 1, 1);
            var spwInplay = alignRound((servepointswonraw - pstats[p].aces)/(pstats[p].pts - pstats[p].aces - pstats[p].dfs), 1, 1);
            var holdPerc = alignRound((holds/sgames), 1, 1); 
            var pointsPerService = alignRound((pstats[p].pts/sgames), 1, 0);
            var pointsLostPerService = alignRound(((pstats[p].pts-pstats[p].fwon-pstats[p].swon)/sgames), 1, 0); 
            var rawaces = pstats[p].aces;
            var rawdoubles = pstats[p].dfs;
            // standard return stats
            var vservepointswonraw = parseInt(pstats[p].ofwon) + parseInt(pstats[p].oswon)
            var rpw = alignRound(1 - ((vservepointswonraw)/pstats[p].opts), 1, 1);
            var rpwInplay = alignRound(1 - ((vservepointswonraw - pstats[p].oaces)/(pstats[p].opts - pstats[p].oaces - pstats[p].odfs)), 1, 1);
            var vace = alignRound((pstats[p].oaces/pstats[p].opts), 1, 1);
            var vdef = alignRound((pstats[p].odfs/pstats[p].opts), 1, 1);
            var r1pw = alignRound(1 - (pstats[p].ofwon/pstats[p].ofirsts), 1, 1);
            var r2pw = alignRound(1 - (pstats[p].oswon/(pstats[p].opts-pstats[p].ofirsts)), 1, 1);
            var breakPerc = alignRound((bpconv/rgames), 1, 1);
            var pointsPerReturn = alignRound((pstats[p].opts/rgames), 1, 0);
            var pointsWonPerReturn = alignRound(((pstats[p].opts-pstats[p].ofwon-pstats[p].oswon)/rgames), 1, 0);
            // median opp rank -- might need to skip for 2 or fewer matches
            var oppranks = pstats[p].oranks;
            oppranks.sort(function(a,b){return a-b});
            var halfx = oppranks.length/2;
            if (oppranks.length % 2 == 0) {var medopp = alignRound((parseInt(oppranks[halfx]) + parseInt(oppranks[halfx-1]))/2, 1, 0);}
            else {var medopp = alignRound(oppranks[halfx-0.5], 1, 0);}
            // mean opp rank
            var totalrank = 0;
            for (var i=0; i<oppranks.length; i++) {
                totalrank += parseInt(oppranks[i]);
                }
            var mnopp = alignRound(totalrank/oppranks.length, 1, 0);        
        }
        var sortdesc = {};
        // statrow = [nmatches, matchrecord, matchwp, spw, spwInplay, rawaces, acerate, rawdoubles, dfrate, defSeconds, firstin, fwin, swin, swinIn, holdPerc, pointsPerService, pointsLostPerService, rpw, rpwInplay, vace, vdef, r1pw, r2pw, breakPerc, pointsPerReturn, pointsWonPerReturn, medopp, mnopp];
        statrow = [nmatches, matchwp, firstin, fwin, swin, rpw, r2pw, breakPerc]
        dataset.matches[p] = statrow
    }
  
}
